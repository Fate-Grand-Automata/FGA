name: CI

on:
  pull_request:
    paths-ignore:
      - '.idea/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.gitattributes'
      - '.gitignore'
      - '*.md'
      - 'LICENSE'
      - 'custom-game-area/**'
  push:
    branches:
      - development
    tags:
      - 'v*'
    paths-ignore:
      - '.idea/**'
      - '.github/**'
      - '.gitattributes'
      - '.gitignore'
      - '*.md'
      - 'LICENSE'
      - 'renovate.json'
      - 'custom-game-area/**'
      - 'FUNDING.yml'
  workflow_dispatch:
    inputs:
      release-canary:
        description: 'Release canary or not'
        default: 'true'
        required: true
env:
  JAVA_VERSION: 17
  JAVA_DISTRO: 'temurin'

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/development' || inputs.release-canary != 'false'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install Python Dependencies
        run: pip install httpx
      
      - name: Determine development branch or pull request
        run: |
          if [[ ${{ github.ref }} == refs/heads/development ]]; then
            echo "BRANCH=development" >>${GITHUB_ENV}
          else
            echo "BRANCH=${{ github.head_ref }}" >>${GITHUB_ENV}
          fi

      - name: Determine Pull Request Number
        run: |
          if [[ ${{ github.ref }} == refs/heads/development ]]; then
            echo "PR_NUMBER=0" >>${GITHUB_ENV}
          else
            echo "PR_NUMBER=${{ github.event.pull_request.number }}" >>${GITHUB_ENV}
          fi
      - name: Determine the repositoru name and owner
        run: |
          echo "REPO_NAME=${{ github.repository }}" >>${GITHUB_ENV}
          echo "REPO_OWNER=${{ github.repository_owner }}" >>${GITHUB_ENV}
      
      - name: Run Python Create Release notes
        run: python .github/scripts/create_release_notes.py
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}
          cache: 'gradle'

      - name: Determine Version Name
        shell: bash
        run: |
          VERSION_CODE=${{ github.run_number }}
          VERSION_NAME=${{ github.run_number }}

          if [[ ${{ github.ref }} == refs/tags/* ]]; then
            VERSION_NAME = ${{ github.ref_name }}
          fi
          echo "FGA_VERSION_CODE=$VERSION_CODE" >>${GITHUB_ENV}
          echo "FGA_VERSION_NAME=$VERSION_NAME" >>${GITHUB_ENV}

      - name: Build Android Package
        run: ./gradlew assemblepreview --scan --parallel --no-daemon

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: app/build/outputs/apk/preview/app-preview.apk

      - name: Upload De-obfuscation mapping file
        uses: actions/upload-artifact@v4
        with:
          name: mapping-preview
          path: app/build/outputs/mapping/preview/mapping.txt

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/development'  
    steps:
      - name: Tag Version
        run: |
          echo "VERSION_TAG=${{ github.run_number }}" >> $GITHUB_ENV
      
      - name: Create Tag
        id: create_tag
        uses: actions/github-script@v6
        with:
          script: |
            const run_tag = `${{ github.run_number }}`; 
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${run_tag}`,
              sha: context.sha
            })
      - uses: actions/download-artifact@v4
        with:
          name: apk

      - name: Rename apk
        run: mv app-preview.apk fga-preview-${{ env.VERSION_TAG }}.apk
      
      - name: Zipped APK
        run: zip -r fga-preview-${{ env.VERSION_TAG }}.zip fga-preview-${{ env.VERSION_TAG }}.apk
      
      - name: Create tagged Release
        id: create_release_tag
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ env.VERSION_TAG }}"
          prerelease: false
          title: 'FGA Preview ${{ github.run_number }}'
          files: |
            fga-preview-${{ env.VERSION_TAG }}.zip